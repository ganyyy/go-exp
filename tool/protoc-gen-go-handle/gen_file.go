package main

import (
	"log"
	"path/filepath"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

var (
	allService = make(map[string]*Service)
)

func init() {
	log.SetFlags(log.Lshortfile | log.LstdFlags)
	log.SetPrefix("[go-handle] ")
}

func generateFile(gen *protogen.Plugin, f *protogen.File) {
	for _, s := range f.Services {
		allService[s.GoName] = parseService(gen, f, s)
	}
}

func parseService(gen *protogen.Plugin, f *protogen.File, s *protogen.Service) *Service {

	service := &Service{
		Name:            s.GoName,
		InnerName:       "inner" + s.GoName,
		Package:         string(f.Desc.Package()),
		ProtogenPackage: f.Proto.GetOptions().GetGoPackage(),
	}
	service.Out = service.OutputFile(gen, ".gen")

	for _, m := range s.Methods {

		if m.Desc.IsStreamingClient() || m.Desc.IsStreamingServer() {
			continue
		}

		rpc := RPC{
			Name: m.GoName,
			Req:  m.Input.GoIdent,
			Rsp:  m.Output.GoIdent,
		}
		if m.Output.GoIdent.GoName == "Empty" {
			rpc.Rsp = protogen.GoIdent{}
		}
		service.RPCs = append(service.RPCs, rpc)
	}
	log.Println(service.String())

	// 生成头部
	service.GenHead()
	// 生成方法枚举
	service.GenConstEnum()
	// 生成 struct
	service.GenStruct()
	// 处理网络消息
	service.GenHandleNetMsg()
	// 处理任务
	service.GenHandleTask()
	// 生成客户端
	service.GenClient()
	// 生成impl
	service.GenImpl(gen)

	return service
}

type RPC struct {
	Name string
	Req  protogen.GoIdent
	Rsp  protogen.GoIdent
}

// IsAsync 是否异步
func (r *RPC) IsAsync() bool {
	return r.Rsp.GoName == ""
}

type Service struct {
	Name            string
	InnerName       string
	Package         string
	ProtogenPackage string
	Out             *protogen.GeneratedFile
	RPCs            []RPC
}

func (s *Service) OutputFile(gen *protogen.Plugin, suffix string) *protogen.GeneratedFile {
	return gen.NewGeneratedFile(
		filepath.Join(s.Package, s.Package+suffix+".go"),
		protogen.GoImportPath(s.Package+"/"+s.Name), // 伪造一个包名
	)
}

func (s *Service) GenHead() {
	out := s.Out
	out.P("// Code generated by protoc-gen-go-handle. DO NOT EDIT.")
	out.P("package ", s.Package)
	out.P()

	out.P("var (")
	out.P("  _ = ", out.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "Println",
		GoImportPath: protogen.GoImportPath("fmt"),
	}))
	out.P("  _ = ", out.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "Background()",
		GoImportPath: protogen.GoImportPath("context"),
	}))
	out.P("  _ = ", out.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "Marshal",
		GoImportPath: protogen.GoImportPath("google.golang.org/protobuf/proto"),
	}))
	out.P("  _ = ", out.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "Version", // TODO 走配置
		GoImportPath: protogen.GoImportPath(commonPkgPath),
	}))
	out.P("  _ = (*", out.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "Empty",
		GoImportPath: protogen.GoImportPath(s.ProtogenPackage),
	}), ")(nil)")
	out.P(")")
	out.P()
}

func (s *Service) GenConstEnum() {
	out := s.Out

	// 生成方法枚举
	out.P("const (")
	p := func(rpcs []RPC) {
		for _, rpc := range rpcs {
			rpcName := rpc.Name
			out.P("  ", s.Name, rpcName, " = ", `"`, s.Name, ".", rpcName, `"`)
		}
	}
	p(s.RPCs)
	out.P(")")
	out.P()
}

func (s *Service) GenStruct() {
	out := s.Out

	out.P("type ", s.InnerName, " struct {")
	out.P("  impl ", s.Name, "Impl")
	out.P("  ch ", out.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "ChannelInvoke", // TODO 走配置
		GoImportPath: protogen.GoImportPath(commonPkgPath),
	}))
	out.P("}")
	out.P()

	out.P("type ", s.Name, " struct {")
	out.P(" inner ", s.InnerName)
	out.P("}")
	out.P()
}

func (s *Service) GenHandleNetMsg() {
	out := s.Out

	protogenIdent := s.ProtogenIdent

	netReq := protogenIdent("NetReq")
	netRsp := protogenIdent("NetRsp")
	commonGenerateOptions := out.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "GenerateOptions()",
		GoImportPath: protogen.GoImportPath(commonPkgPath),
	})

	// TODO 错误日志

	out.P("func (m *", s.InnerName, ") HandleNetMsg(netReq *", netReq, ") (r *", netRsp, ", _ error) {")
	out.P("  var netRsp ", netRsp)
	out.P("  var req, resp proto.Message")
	out.P("  var isAsync bool")
	out.P("  switch netReq.Code {")
	for _, rpc := range s.RPCs {
		out.P("  case ", s.Name, rpc.Name, ":")
		out.P("    req = new(", protogenIdent(rpc.Req.GoName), ")")
		if rpc.Rsp.GoName != "" {
			out.P("    resp = new(", protogenIdent(rpc.Rsp.GoName), ")")
		} else {
			out.P("    isAsync = true")
		}
	}
	out.P("  default:")
	out.P("    return nil, fmt.Errorf(\"unknown task code: %v\", netReq.Code)")
	out.P("  }")

	out.P("  if err := proto.Unmarshal(netReq.Req, req); err != nil {")
	out.P("    return nil, err")
	out.P("  }")
	out.P("  ctx, cancel := ", commonGenerateOptions, ".Context()")
	out.P("  defer cancel()")
	out.P("  err := m.ch.Invoke(ctx, netReq.Code, req, resp)")
	out.P("  if isAsync {")
	out.P("    return nil, err")
	out.P("  }")
	out.P("  if err != nil {")
	out.P("    netRsp.Err = err.Error()")
	out.P("  } else {")
	out.P("    netRsp.Rsp, _ = proto.Marshal(resp)")
	out.P("  }")
	out.P("  return &netRsp, err")
	out.P("}")
	out.P()
}

// GenHandleTask 处理任务
func (s *Service) GenHandleTask() {
	out := s.Out

	out.P("func (m *", s.InnerName, ") HandleTask(task ", out.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "Task",
		GoImportPath: protogen.GoImportPath(commonPkgPath),
	}), ") {")
	out.P("  defer func() {")
	out.P("    if r := recover(); r != nil {")
	out.P("      task.Finish(fmt.Errorf(\"task panic: %v\", r))")
	out.P("    }")
	out.P("  }()")
	out.P("  switch task.Code {")
	for _, rpc := range s.RPCs {
		out.P("  case ", s.Name, rpc.Name, " :")
		out.P("    req := task.Req.(*", s.ProtogenIdent(rpc.Req.GoName), ")")
		if !rpc.IsAsync() {
			out.P("    resp := task.Rsp.(*", s.ProtogenIdent(rpc.Rsp.GoName), ")")
			out.P("    task.Finish(m.impl.", rpc.Name, "(task.Context, req, resp))")
		} else {
			out.P("    m.impl.", rpc.Name, "(task.Context, req)")
			out.P("    task.Finish(nil)")
		}
	}
	out.P("  default:")
	out.P("    task.Finish(fmt.Errorf(\"unknown task code: %v\", task.Code))")
	out.P("  }")
	out.P("}")

	out.P()
}

// GenClient
func (s *Service) GenClient() {
	out := s.Out

	commonOpt := out.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "ApplyOption",
		GoImportPath: protogen.GoImportPath(commonPkgPath),
	})

	commonClientInterface := out.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "ClientInterface",
		GoImportPath: protogen.GoImportPath(commonPkgPath),
	})

	clientInterName := s.Name + "Client"
	clientInterface := "I" + clientInterName
	clientInnerName := "i" + clientInterName

	out.P("func (m *", s.Name, ") L() ", clientInterface, " {")
	out.P("  return New", clientInterName, "(&m.inner.ch)")
	out.P("}")

	out.P("type ", clientInterface, " interface {")
	for _, rpc := range s.RPCs {
		if rpc.IsAsync() {
			out.P("  ", rpc.Name, "(*", s.ProtogenIdent(rpc.Req.GoName), ", ...", commonOpt, ") error")
		} else {
			out.P("  ", rpc.Name, "(*", s.ProtogenIdent(rpc.Req.GoName), ", ...", commonOpt, ") (*", s.ProtogenIdent(rpc.Rsp.GoName), ", error)")
		}
	}
	out.P("}")
	out.P()

	out.P("type ", clientInnerName, " struct {")
	out.P("  cc ", commonClientInterface)
	out.P("}")
	out.P()

	out.P("func New", clientInterName, "(cc ", commonClientInterface, ") ", clientInterface, " {")
	out.P("  return ", clientInnerName, "{cc}")
	out.P("}")
	out.P()

	commonGenerateCtx := out.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "GenerateOptions(opts...).Context()",
		GoImportPath: protogen.GoImportPath(commonPkgPath),
	})

	for _, rpc := range s.RPCs {
		if rpc.IsAsync() {
			out.P("func (c ", clientInnerName, ") ", rpc.Name, "(in *", s.ProtogenIdent(rpc.Req.GoName), ", opts ...", commonOpt, ") error {")
			out.P("  ctx, cancel := ", commonGenerateCtx)
			out.P("  defer cancel()")
			out.P("  return c.cc.Invoke(ctx, ", s.Name+rpc.Name, ", in, nil)")
			out.P("}")
		} else {
			out.P("func (c ", clientInnerName, ") ", rpc.Name, "(in *", s.ProtogenIdent(rpc.Req.GoName), ", opts ...", commonOpt, ") (*", s.ProtogenIdent(rpc.Rsp.GoName), ", error) {")
			out.P("  ctx, cancel := ", commonGenerateCtx)
			out.P("  defer cancel()")
			out.P("  out := new(", s.ProtogenIdent(rpc.Rsp.GoName), ")")
			out.P("  err := c.cc.Invoke(ctx, ", s.Name+rpc.Name, ", in, out)")
			out.P("  if err != nil {")
			out.P("    return nil, err")
			out.P("  }")
			out.P("  return out, nil")
			out.P("}")
		}
		out.P()
	}
	out.P()
}

// ProtogenIdent 获取protogen的标识
func (s *Service) ProtogenIdent(name string) string {
	return s.Out.QualifiedGoIdent(protogen.GoIdent{
		GoName:       name,
		GoImportPath: protogen.GoImportPath(s.ProtogenPackage),
	})
}

// String 返回服务的字符串表示
func (s *Service) String() string {
	var sb strings.Builder
	sb.WriteString("\nService: " + s.Name + "\n")
	sb.WriteString("Package: " + s.Package + "\n")
	sb.WriteString("RPCs:\n")
	for _, rpc := range s.RPCs {
		sb.WriteString("  - " + rpc.Name + "(" + rpc.Req.GoName + ") " + rpc.Rsp.GoName + "\n")
	}
	return sb.String()
}

func (s *Service) ImplName() string {
	return s.Name + "Impl"
}
