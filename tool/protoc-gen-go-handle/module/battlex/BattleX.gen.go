// Code generated by protoc-gen-go-handle. DO NOT EDIT.
package battlex

import (
	context "context"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	common "protoc-gen-go-handle/common"
	protogen "protoc-gen-go-handle/protogen"
)

var (
	_ = fmt.Println
	_ = context.Background()
	_ = proto.Marshal
	_ = common.Version
	_ = (*protogen.Empty)(nil)
)

const (
	BattleXGetBattleInfo  = "BattleX.GetBattleInfo"
	BattleXGetBattleInfo2 = "BattleX.GetBattleInfo2"
)

type innerBattleX struct {
	impl BattleXImpl
	ch   common.ChannelInvoke
}

type BattleX struct {
	inner innerBattleX
}

func (m *innerBattleX) HandleNetMsg(netReq *protogen.NetReq) (r *protogen.NetRsp, _ error) {
	var netRsp protogen.NetRsp
	var req, resp proto.Message
	var isAsync bool
	switch netReq.Code {
	case BattleXGetBattleInfo:
		req = new(protogen.GetBattleInfoReq)
		resp = new(protogen.GetBattleInfoRsp)
	case BattleXGetBattleInfo2:
		req = new(protogen.GetBattleInfoReq)
		resp = new(protogen.GetBattleInfoRsp)
	default:
		return nil, fmt.Errorf("unknown task code: %v", netReq.Code)
	}
	if err := proto.Unmarshal(netReq.Req, req); err != nil {
		return nil, err
	}
	ctx, cancel := common.GenerateOptions().Context()
	defer cancel()
	err := m.ch.Invoke(ctx, netReq.Code, req, resp)
	if isAsync {
		return nil, err
	}
	if err != nil {
		netRsp.Err = err.Error()
	} else {
		netRsp.Rsp, _ = proto.Marshal(resp)
	}
	return &netRsp, err
}

func (m *innerBattleX) HandleTask(task common.Task) {
	defer func() {
		if r := recover(); r != nil {
			task.Finish(fmt.Errorf("task panic: %v", r))
		}
	}()
	switch task.Code {
	case BattleXGetBattleInfo:
		req := task.Req.(*protogen.GetBattleInfoReq)
		resp := task.Rsp.(*protogen.GetBattleInfoRsp)
		task.Finish(m.impl.GetBattleInfo(task.Context, req, resp))
	case BattleXGetBattleInfo2:
		req := task.Req.(*protogen.GetBattleInfoReq)
		resp := task.Rsp.(*protogen.GetBattleInfoRsp)
		task.Finish(m.impl.GetBattleInfo2(task.Context, req, resp))
	default:
		task.Finish(fmt.Errorf("unknown task code: %v", task.Code))
	}
}

func (m *BattleX) L() IBattleXClient {
	return NewBattleXClient(&m.inner.ch)
}

type IBattleXClient interface {
	GetBattleInfo(*protogen.GetBattleInfoReq, ...common.ApplyOption) (*protogen.GetBattleInfoRsp, error)
	GetBattleInfo2(*protogen.GetBattleInfoReq, ...common.ApplyOption) (*protogen.GetBattleInfoRsp, error)
}

type iBattleXClient struct {
	cc common.ClientInterface
}

func NewBattleXClient(cc common.ClientInterface) IBattleXClient {
	return iBattleXClient{cc}
}

func (c iBattleXClient) GetBattleInfo(in *protogen.GetBattleInfoReq, opts ...common.ApplyOption) (*protogen.GetBattleInfoRsp, error) {
	ctx, cancel := common.GenerateOptions(opts...).Context()
	defer cancel()
	out := new(protogen.GetBattleInfoRsp)
	err := c.cc.Invoke(ctx, BattleXGetBattleInfo, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c iBattleXClient) GetBattleInfo2(in *protogen.GetBattleInfoReq, opts ...common.ApplyOption) (*protogen.GetBattleInfoRsp, error) {
	ctx, cancel := common.GenerateOptions(opts...).Context()
	defer cancel()
	out := new(protogen.GetBattleInfoRsp)
	err := c.cc.Invoke(ctx, BattleXGetBattleInfo2, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
