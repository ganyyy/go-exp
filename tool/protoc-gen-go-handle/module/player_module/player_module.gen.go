// Code generated by protoc-gen-go-handle. DO NOT EDIT.
package player_module

import (
	context "context"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	common "protoc-gen-go-handle/common"
	protogen "protoc-gen-go-handle/protogen"
)

var (
	_ = fmt.Println
	_ = context.Background()
	_ = proto.Marshal
	_ = common.Version
	_ = (*protogen.Empty)(nil)
)

const (
	PlayerModuleNotifyInfo    = "PlayerModule.NotifyInfo"
	PlayerModuleGetPlayerInfo = "PlayerModule.GetPlayerInfo"
	PlayerModuleGetName       = "PlayerModule.GetName"
	PlayerModuleNotifyAddAge  = "PlayerModule.NotifyAddAge"
)

type innerPlayerModule struct {
	impl PlayerModuleImpl
	ch   common.ChannelInvoke
}

type PlayerModule struct {
	inner innerPlayerModule
}

func (m *innerPlayerModule) HandleNetMsg(netReq *protogen.NetReq) (r *protogen.NetRsp, _ error) {
	var netRsp protogen.NetRsp
	var req, resp proto.Message
	var isAsync bool
	switch netReq.Code {
	case PlayerModuleNotifyInfo:
		req = new(protogen.NotifyInfoReq)
		isAsync = true
	case PlayerModuleGetPlayerInfo:
		req = new(protogen.GetPlayerInfoReq)
		resp = new(protogen.GetPlayerInfoRsp)
	case PlayerModuleGetName:
		req = new(protogen.GetNameReq)
		resp = new(protogen.GetNameRsp)
	case PlayerModuleNotifyAddAge:
		req = new(protogen.NotifyAddAgeReq)
		isAsync = true
	default:
		return nil, fmt.Errorf("unknown task code: %v", netReq.Code)
	}
	if err := proto.Unmarshal(netReq.Req, req); err != nil {
		return nil, err
	}
	ctx, cancel := common.GenerateOptions().Context()
	defer cancel()
	err := m.ch.Invoke(ctx, netReq.Code, req, resp)
	if isAsync {
		return nil, err
	}
	if err != nil {
		netRsp.Err = err.Error()
	} else {
		netRsp.Rsp, _ = proto.Marshal(resp)
	}
	return &netRsp, err
}

func (m *innerPlayerModule) HandleTask(task common.Task) {
	defer func() {
		if r := recover(); r != nil {
			task.Finish(fmt.Errorf("task panic: %v", r))
		}
	}()
	switch task.Code {
	case PlayerModuleNotifyInfo:
		req := task.Req.(*protogen.NotifyInfoReq)
		m.impl.NotifyInfo(task.Context, req)
		task.Finish(nil)
	case PlayerModuleGetPlayerInfo:
		req := task.Req.(*protogen.GetPlayerInfoReq)
		resp := task.Rsp.(*protogen.GetPlayerInfoRsp)
		task.Finish(m.impl.GetPlayerInfo(task.Context, req, resp))
	case PlayerModuleGetName:
		req := task.Req.(*protogen.GetNameReq)
		resp := task.Rsp.(*protogen.GetNameRsp)
		task.Finish(m.impl.GetName(task.Context, req, resp))
	case PlayerModuleNotifyAddAge:
		req := task.Req.(*protogen.NotifyAddAgeReq)
		m.impl.NotifyAddAge(task.Context, req)
		task.Finish(nil)
	default:
		task.Finish(fmt.Errorf("unknown task code: %v", task.Code))
	}
}

func (m *PlayerModule) L() IPlayerModuleClient {
	return NewPlayerModuleClient(&m.inner.ch)
}

type IPlayerModuleClient interface {
	NotifyInfo(*protogen.NotifyInfoReq, ...common.ApplyOption) error
	GetPlayerInfo(*protogen.GetPlayerInfoReq, ...common.ApplyOption) (*protogen.GetPlayerInfoRsp, error)
	GetName(*protogen.GetNameReq, ...common.ApplyOption) (*protogen.GetNameRsp, error)
	NotifyAddAge(*protogen.NotifyAddAgeReq, ...common.ApplyOption) error
}

type iPlayerModuleClient struct {
	cc common.ClientInterface
}

func NewPlayerModuleClient(cc common.ClientInterface) IPlayerModuleClient {
	return iPlayerModuleClient{cc}
}

func (c iPlayerModuleClient) NotifyInfo(in *protogen.NotifyInfoReq, opts ...common.ApplyOption) error {
	ctx, cancel := common.GenerateOptions(opts...).Context()
	defer cancel()
	return c.cc.Invoke(ctx, PlayerModuleNotifyInfo, in, nil)
}

func (c iPlayerModuleClient) GetPlayerInfo(in *protogen.GetPlayerInfoReq, opts ...common.ApplyOption) (*protogen.GetPlayerInfoRsp, error) {
	ctx, cancel := common.GenerateOptions(opts...).Context()
	defer cancel()
	out := new(protogen.GetPlayerInfoRsp)
	err := c.cc.Invoke(ctx, PlayerModuleGetPlayerInfo, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c iPlayerModuleClient) GetName(in *protogen.GetNameReq, opts ...common.ApplyOption) (*protogen.GetNameRsp, error) {
	ctx, cancel := common.GenerateOptions(opts...).Context()
	defer cancel()
	out := new(protogen.GetNameRsp)
	err := c.cc.Invoke(ctx, PlayerModuleGetName, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c iPlayerModuleClient) NotifyAddAge(in *protogen.NotifyAddAgeReq, opts ...common.ApplyOption) error {
	ctx, cancel := common.GenerateOptions(opts...).Context()
	defer cancel()
	return c.cc.Invoke(ctx, PlayerModuleNotifyAddAge, in, nil)
}
