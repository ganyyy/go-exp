package main

import (
	"flag"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

var (
	version = "v0.0.1"
)

var (
	ptrShowVersion = flag.Bool("version", false, "print version and exit")
	ptrReadOnlyPkg = flag.String("readonly_pkg", "protoc-gen-readonly/readonly", "readonly package name")
	ptrSuffix      = flag.String("suffix", "readonly", "suffix of generated file")
)

func main() {
	protogen.Options{
		ParamFunc: flag.CommandLine.Set,
	}.Run(func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

		if *ptrShowVersion {
			println("version:", version)
			return nil
		}

		readOnlyPkg := *ptrReadOnlyPkg
		suffix := *ptrSuffix

		println("readonly_pkg:", readOnlyPkg)
		println("suffix:", suffix)

		var readOnlyIdent = protogen.GoIdent{
			GoName:       "Version",
			GoImportPath: protogen.GoImportPath(readOnlyPkg),
		}

		for _, file := range gen.Files {
			// Do something with the file
			if !file.Generate {
				continue
			}
			genFile := gen.NewGeneratedFile(strings.Join(
				[]string{file.GeneratedFilenamePrefix, suffix, "go"}, ".",
			), file.GoImportPath)
			versionField := genFile.QualifiedGoIdent(readOnlyIdent)
			genFile.P("// Code generated by protoc-gen-readonly. DO NOT EDIT.")
			genFile.P("package ", file.GoPackageName)
			genFile.P("const _ = " + versionField)

			var roPkgName, _ = getTypePkg(versionField)

			var roFile File
			roFile.Name = file.GeneratedFilenamePrefix

			var cfg = GenCfg{
				ReadOnlyPkg:   roPkgName,
				GeneratedFile: genFile,
			}
			println("file:", file.GeneratedFilenamePrefix)
			for _, msg := range file.Messages {
				// Do something with the message
				roMsg := roFile.AddMessage(msg.GoIdent.GoName)
				roMsg.PkgName = genFile.QualifiedGoIdent(msg.GoIdent)
				for _, field := range msg.Fields {
					roMsg.AddField(field, cfg)
				}
				println("message:", roMsg.Name, roMsg.PkgName)
				for _, field := range roMsg.Fields {
					println("field:", field.OuterName, field.Type)
				}
				roMsg.GenStruct(cfg)
				roMsg.GenNew(cfg)
				roMsg.GenGet(cfg)
				genFile.P()
			}
		}
		return nil
	})
}
