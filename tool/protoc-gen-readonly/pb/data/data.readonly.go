// Code generated by protoc-gen-readonly. DO NOT EDIT.
package data

import (
	readonly "protoc-gen-readonly/readonly"
)

const _ = readonly.Version

type SimpleDataReadOnly struct {
	inner  *SimpleData
	_Tags  readonly.List[string]
	_Attrs readonly.Map[string, string]
}

func NewSimpleDataReadOnly(p **SimpleData) *SimpleDataReadOnly {
	if p == nil || *p == nil {
		return &SimpleDataReadOnly{inner: nil}
	}
	inner := *p
	*p = nil
	return &SimpleDataReadOnly{
		inner:  inner,
		_Tags:  readonly.NewList(&inner.Tags),
		_Attrs: readonly.NewMap(&inner.Attrs),
	}
}

func (x *SimpleDataReadOnly) GetId() (_ int32) {
	if x == nil || x.inner == nil {
		return
	}
	return x.inner.GetId()
}

func (x *SimpleDataReadOnly) GetName() (_ string) {
	if x == nil || x.inner == nil {
		return
	}
	return x.inner.GetName()
}

func (x *SimpleDataReadOnly) GetTags() (_ readonly.List[string]) {
	if x == nil || x.inner == nil {
		return
	}
	return x._Tags
}

func (x *SimpleDataReadOnly) GetAttrs() (_ readonly.Map[string, string]) {
	if x == nil || x.inner == nil {
		return
	}
	return x._Attrs
}

type ReferencedDataReadOnly struct {
	inner      *ReferencedData
	_Simples   readonly.List[*SimpleDataReadOnly]
	_SimpleMap readonly.Map[string, *SimpleDataReadOnly]
}

func NewReferencedDataReadOnly(p **ReferencedData) *ReferencedDataReadOnly {
	if p == nil || *p == nil {
		return &ReferencedDataReadOnly{inner: nil}
	}
	inner := *p
	*p = nil
	return &ReferencedDataReadOnly{
		inner:      inner,
		_Simples:   readonly.NewListFrom(&inner.Simples, NewSimpleDataReadOnly),
		_SimpleMap: readonly.NewMapFrom(&inner.SimpleMap, NewSimpleDataReadOnly),
	}
}

func (x *ReferencedDataReadOnly) GetSimples() (_ readonly.List[*SimpleDataReadOnly]) {
	if x == nil || x.inner == nil {
		return
	}
	return x._Simples
}

func (x *ReferencedDataReadOnly) GetSimpleMap() (_ readonly.Map[string, *SimpleDataReadOnly]) {
	if x == nil || x.inner == nil {
		return
	}
	return x._SimpleMap
}
